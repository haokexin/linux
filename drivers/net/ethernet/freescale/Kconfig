#
# Freescale device configuration
#

config NET_VENDOR_FREESCALE
	bool "Freescale devices"
	default y
	depends on FSL_SOC || QUICC_ENGINE || CPM1 || CPM2 || PPC_MPC512x || \
		   M523x || M527x || M5272 || M528x || M520x || M532x || \
		   ARCH_MXC || ARCH_MXS || (PPC_MPC52xx && PPC_BESTCOMM)
	---help---
	  If you have a network (Ethernet) card belonging to this class, say Y
	  and read the Ethernet-HOWTO, available from
	  <http://www.tldp.org/docs.html#howto>.

	  Note that the answer to this question doesn't directly affect the
	  kernel: saying N will just cause the configurator to skip all
	  the questions about Freescale devices. If you say Y, you will be
	  asked for your specific card in the following questions.

if NET_VENDOR_FREESCALE

config FEC
	tristate "FEC ethernet controller (of ColdFire and some i.MX CPUs)"
	depends on (M523x || M527x || M5272 || M528x || M520x || M532x || \
		   ARCH_MXC || SOC_IMX28)
	default ARCH_MXC || SOC_IMX28 if ARM
	select PHYLIB
	---help---
	  Say Y here if you want to use the built-in 10/100 Fast ethernet
	  controller on some Motorola ColdFire and Freescale i.MX processors.

config FEC_MPC52xx
	tristate "FEC MPC52xx driver"
	depends on PPC_MPC52xx && PPC_BESTCOMM
	select CRC32
	select PHYLIB
	select PPC_BESTCOMM_FEC
	---help---
	  This option enables support for the MPC5200's on-chip
	  Fast Ethernet Controller
	  If compiled as module, it will be called fec_mpc52xx.

config FEC_MPC52xx_MDIO
	bool "FEC MPC52xx MDIO bus driver"
	depends on FEC_MPC52xx
	default y
	---help---
	  The MPC5200's FEC can connect to the Ethernet either with
	  an external MII PHY chip or 10 Mbps 7-wire interface
	  (Motorola? industry standard).
	  If your board uses an external PHY connected to FEC, enable this.
	  If not sure, enable.
	  If compiled as module, it will be called fec_mpc52xx_phy.

source "drivers/net/ethernet/freescale/fs_enet/Kconfig"

config FSL_PQ_MDIO
	tristate "Freescale PQ MDIO"
	depends on FSL_SOC
	select PHYLIB
	---help---
	  This driver supports the MDIO bus used by the gianfar and UCC drivers.

source "drivers/net/ethernet/freescale/dpa/NetCommSw/Kconfig"

config UCC_GETH
	tristate "Freescale QE Gigabit Ethernet"
	depends on QUICC_ENGINE
	select FSL_PQ_MDIO
	select PHYLIB
	---help---
	  This driver supports the Gigabit Ethernet mode of the QUICC Engine,
	  which is available on some Freescale SOCs.

config UGETH_TX_ON_DEMAND
	bool "Transmit on Demand support"
	depends on UCC_GETH

config GIANFAR
	tristate "Gianfar Ethernet"
	depends on FSL_SOC
	select FSL_PQ_MDIO
	select PHYLIB
	select CRC32
	---help---
	  This driver supports the Gigabit TSEC on the MPC83xx, MPC85xx,
	  and MPC86xx family of chips, and the FEC on the 8540.

config DPA
	bool "Freescale Data Path Frame Manager Ethernet"
	depends on FSL_SOC && FSL_BMAN_PORTAL && FSL_QMAN_PORTAL && FSL_FMAN
	select PHYLIB

config DPA_OFFLINE_PORTS
	bool "Offline Ports support"
	depends on DPA
	default y
	help
	  The Offline Parsing / Host Command ports (short: OH ports, of Offline ports) provide
	  most of the functionality of the regular, online ports, except they receive their
	  frames from a core or an accelerator on the SoC, via QMan frame queues,
	  rather than directly from the network.
	  Offline ports are configured via PCD (Parse-Classify-Distribute) schemes, just like
	  any online FMan port. They deliver the processed frames to frame queues, according
	  to the applied PCD configurations.

	  Choosing this feature will not impact the functionality and/or performance of the system,
	  so it is safe to have it.

config DPA_MAX_FRM_SIZE
	int "Maximum L2 frame size"
	depends on DPA
	range 64 9600
	default "1522"
	help
	  Configure this in relation to the maximum possible MTU of your network configuration. In particular,
	  one would need to increase this value in order to use jumbo frames. DPA_MAX_FRM_SIZE must accomodate
	  the Ethernet FCS (4 bytes) and one ETH+VLAN header (18 bytes), to a total of 22 bytes in excess of
	  the desired L3 MTU.

	  Note that having too large a DPA_MAX_FRM_SIZE (much larger than the actual MTU) may lead to buffer
	  exhaustion, especially in the case of badly fragmented datagrams on the Rx path. Conversely,
	  having a DPA_MAX_FRM_SIZE smaller than the actual MTU will lead to frames being dropped.

	  This can be overridden by specifying "fsl_fman_phy_max_frm" in the kernel bootargs:
	    * in Hypervisor-based scenarios, by adding a "chosen" node with the "bootargs" property specifying
              "fsl_fman_phy_max_frm=<YourValue>";
	    * in non-Hypervisor-based scenarios, via u-boot's env, by modifying the "bootargs" env variable.

config FSL_DPA_1588
	tristate "IEEE 1588-compliant timestamping"
	depends on DPA
	default n

choice DPA_ETH_WQ_ASSIGN
	prompt "WorkQueue assignment scheme for FrameQueues"
	default DPA_ETH_WQ_MULTI
	help
	  Selects the FrameQueue to WorkQueue assignment scheme.

	config DPA_ETH_WQ_LEGACY
		bool "Legacy WQ assignment"
		help
		  Statically-defined FQIDs are round-robin assigned to all WQs (0..7). PCD queues are always
		  in this category. Other frame queues may be those used for "MAC-less" or "shared MAC" configurations
		  of the driver.
		  Dynamically-defined FQIDs all go to WQ7.
	config DPA_ETH_WQ_MULTI
		bool "Multi-WQ assignment"
		help
		  Tx Confirmation FQs go to WQ1.
		  Rx Default, Tx and PCD FQs go to WQ3.
		  Rx Error and Tx Error FQs go to WQ2.
endchoice

config DPAA_ETH_UNIT_TESTS
	bool "Run Unit Tests for DPAA Ethernet"
	depends on DPA
	default y

endif # NET_VENDOR_FREESCALE
